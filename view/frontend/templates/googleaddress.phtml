<?php
/** @var \Magento\Framework\View\Element\Template $block */
/** @var \Magento\Framework\Escaper $escaper */
$helper = $block->getViewModel();
?>
<script>
    require(['jquery','domReady!'],

        function ($) {
            $(document).on('focus', "#street_1", function () {
                geolocate();
            });
        },

        function ($) {
            $(document).on('keyup', "fieldset .street .control ._required .input-text", function () {
                geolocate();
            });
        }

    );
</script>
<script>
    var autocomplete;
    function initAutocomplete() {
        var clist='<?=$escaper->escapeHtml($helper->getRestrictions())?>'.split(",");
        autocomplete = new google.maps.places.Autocomplete((document.querySelector("#street_1")),
            {
                types: ['geocode'],
                componentRestrictions: {country: clist}
            });
        document.querySelector("#street_1").focus();
        autocomplete.addListener('place_changed', addressAutofill);
    }
    function addressAutofill() {
        const place = autocomplete.getPlace();

        for (const component of place.address_components) {
            const componentType = component.types[0];
            switch (componentType) {
                case "street_number": {
                    document.querySelector("#street_1").value = component.long_name;
                    break;
                }
                case "route": {
                    document.querySelector("#street_2").value = component.long_name;
                    break;
                }
                case "postal_code": {
                    document.querySelector("input[name='postcode']").value = component.long_name;
                    break;
                }
                case "locality":
                    document.querySelector("input[name='city']").value = component.long_name;
                    break;
                case "country":
                    if (jQuery('#country').length) {
                        jQuery('#country').val(component.short_name);
                        jQuery('#country').trigger('change');
                    }
                    break;
                case "administrative_area_level_1": {
                    var state = component.long_name;
                    break;
                }
            }
        }
        if (state != '' && state != undefined) {
            var element_css = document.getElementById('region_id').style.display;
            if (element_css == 'inline-block') {

                if (jQuery('#region_id').length) {
                    jQuery('#region_id' + ' option')
                    jQuery('#region_id' + ' option')
                        .filter(function () {
                            return jQuery.trim(jQuery(this).text()) == state;
                        })
                        .attr('selected', true);
                    jQuery('#region_id').trigger('change');
                }
            } else {
                document.querySelector("input[name='region']").value = state;
            }
        }
    }

    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script
    src="https://maps.googleapis.com/maps/api/js?key=<?=$escaper->escapeHtml($helper->getgoogleapikey())?>&
    libraries=places&callback=initAutocomplete"
    async defer></script>


